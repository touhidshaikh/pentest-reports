#!/usr/bin/env python3
# -*- coding: utf-8 -*-

template = """---
layout: report
image: {ENGAGEMENT_PREVIEW_IMAGE} 
team: {TEAM}
engagement_name: {ENGAGEMENT} 
engagement_preview_file: {ENGAGEMENT_PREVIEW_IMAGE} 
engagement_pdf_file: {ENGAGEMENT_PDF_FILE} 
report_keywords: {KEYWORDS}
report_cves: {CVES}
report_commands: {COMMANDS}

# Page specifics
title: {TEAM} - {ENGAGEMENT} 
description: View and download a complete penetration test report from {TEAM}. Learn about {TEAM}'s methodology and tools used in pentest reports.
---
"""

data = {
	"items": []
}

import logging
import os
import subprocess
from shlex import quote
from typing import List, Set

logging.basicConfig(format='%(levelname)s %(message)s', level=logging.DEBUG)

import json
import re

import pandas as pd
import PyPDF2

with open('_scripts/commands.json') as commands_file:
	commands = json.load(commands_file)["commands"]

command_names = [command["name"].lower() for command in commands]

import spacy

nlp = spacy.load("en_core_web_md")

def extract_text(pdf_filename) -> str:
	text = ""
	with open(pdf_filename, 'rb') as pdf_fd:
		pdf_reader = PyPDF2.PdfReader(pdf_fd)
		for page in pdf_reader.pages:
		    try:
		        text += page.extract_text()
		    except:
		        pass

	return text

def extract_keywords(text: str) -> List[str]:
    top_keywords = []
    try:
        keyword_freq = {}
        doc = nlp(text)
        for entity in doc.ents:
            if entity.label_ == "ORG" or entity.label_ == "PERSON" or entity.label_ == "GPE":
                keyword_freq[entity.text] = keyword_freq.get(entity.text, 0) + 1

        for token in doc:
            if token.pos_ == "NOUN" or token.pos_ == "PROPN":
                keyword_freq[token.text] = keyword_freq.get(token.text, 0) + 1
        sorted_keywords = sorted(keyword_freq.items(), key=lambda x: x[1], reverse=True)
        top_keywords = [keyword for keyword, freq in sorted_keywords if len(keyword) >= 3]
    except:
        pass
    return top_keywords[:20]

def extract_cves(text: str) -> Set[str]:
	r = re.compile(r'cve-\d\d\d\d-\d\d\d\d', re.IGNORECASE)
	return sorted(set(re.findall(r, text)))

def extract_commands(text: str) -> Set[str]:
	return [command_name for command_name in command_names if command_name in text]

for entry in os.listdir("reports"):
	if entry not in [".", "..", "index.md"]:
		logging.info('entry %s', entry)
		reportDirName = "reports/" + entry
		for file in os.listdir(os.path.join("reports", entry)):
			if file.endswith(".pdf"):
				pdf_filename = f"{reportDirName}/{file}"
				logging.info('file %s', file)

				report_text = extract_text(pdf_filename)
				report_text_lowered = report_text.lower()

				report_keywords = extract_keywords(report_text_lowered)
				report_cves = extract_cves(report_text)
				report_commands = extract_commands(report_text_lowered)

				basefile = file[0:-4]
				title = basefile.replace('_', ' ')
				content = template.format(
					TEAM = entry,
					ENGAGEMENT = title, 
					ENGAGEMENT_PREVIEW_IMAGE = f"/reports/{entry}/{basefile}.png",
					ENGAGEMENT_PDF_FILE = basefile + '.pdf',
					KEYWORDS = ', '.join(report_keywords),
					CVES = ', '.join(report_cves),
					COMMANDS = ','.join(report_commands)
				)
				with open(f"reports/{entry}/{basefile}.md", 'w') as fd:
					fd.write(content)

				data["items"].append({
					"name": f"{entry} - {title}",
					"link": f"/reports/{entry}/{basefile}.html" 
				})

				os.system("pdftoppm -singlefile -png -f 1 -l 1 " + quote(pdf_filename) + " " + quote(f"{reportDirName}/{basefile}"))

import yaml


class Dumper(yaml.Dumper):
	def increase_indent(self, flow=False, *args, **kwargs):
		return super().increase_indent(flow=flow, indentless=False)

with open("_data/reports.yml", 'w') as fd:
    fd.write(yaml.dump(data, sort_keys=False, Dumper=Dumper))

